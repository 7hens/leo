_/
	(Buildin) () :Value
	(EvalExp) (vm:VM, exp:Exp) :Value
	(Execute) (void) :Value

	System_True, System_Number, System_String, System_Function, System_Builin, System_Accessor

	main (argc:int, argv:Chars) :int

	util_hashString (chars:Chars) :uint32
	util_hashNumber (number:real) :uint32
	util_r2s (number:real) :Chars

	debug_assert (condition:Any)
	debug_log (format:Chars, var:Any, ...)
	debug_error (format:Chars, var:Any, ...)

vm/
	<VM>
		pool[] :Value 		/* 常量池 */
		poolSize :uint32 	/* 常量池的大小 */
		callList :CallFrame /* 调用帧的栈 */
	VM_getNumber (self:VM, value:Number) :uint32
	VM_getString (self:VM, value:String) :uint32
	VM_getFunction (self:VM, value:Function) :uint32
	VM_getValue (self:VM, value:Value) :uint32
	VM_addCallFrame (self:VM, callFrame:CallFrame)

	/*	函数对象分为三个部分:
	 *		函数体: Function(编译时), 包含寄存器的分布信息, 和字节码数组
	 *		调用帧: CallFrame(运行时), 包含运行时使用的寄存器数组, pc, 临时变量栈, GC列表
	 *		闭包值: Closure(运行时), 保存闭包变量的值 (普通函数不需要这个部分)
	 *
	 *	函数参数的默认值的实现:
	 *		如果将一个空值赋值给某个参数, 那么该参数将会被赋予默认值
	 *		即, 在函数体中添加相应的字节码: para |= default
	 */

	/*	Function表示一个函数, 通常放于常量池中
	 *	Function本身不创建寄存器, 而只保存寄存器的分布信息:
	 *		闭包段: [0 ~ atPos-1], top函数中传进来的值将放置于这个区间
	 *		参数段: [atPos+1 ~ localPos-1], 其中索引argPos中保存一个栈, 用于存储多余的参数
	 *		局部段: [localPos ~ regCount - 1], 用于存储局部变量
	 */
	<Function>
		vm :VM
		atPos :byte		/* @值所在的位置, 用来分隔闭包段和参数段 */
		argPos :byte	/* 多参数的位置, 多余的参数都将被放入该栈中 */
		localPos :byte	/* 局部变量的起始存放位置 */
		regCount :byte	/* 寄存器数量, 必需小于256 */
		codes[] :uint32	/* 函数体的字节码数组 */
	Function_new (vm:VM, argCount:byte, argPos:byte) :Function
	Function_addCode (self:Function, code:uint32) :void


	/* CallFrame表示一个调用帧
	 * 每次发生函数调用的时候, 都会创建一个CallFrame
	 * CallFrame保存了函数调用所需的数据, 以及上下文
	 */
	<CallFrame>
		reg[] :Value 	/* 寄存器数组, 其分布信息由func决定 */
		pc :uint32		/* 计数器 */
		prev :CallFrame /* 用于调用栈 */
		func :Function 	/* 所指向的函数 */
		temp :Stack 	/* 临时变量栈 */
		gcList :List 	/* GC列表 */
	CallFrame_new (top:CallFrame, func:Function) :CallFrame
	CallFrame_eval (self:CallFrame) :Value

exp/
	<ExpType>
		{IDENTIFIER_EXP, VALUE_EXP, OBJECT_EXP, REQUIRE_EXP, ...}
	<Exp>
		type :ExpType
		exp :{value:Value, unary:Exp, binary:BinaryExp, ternary:TernaryExp}
	Exp_newValue (value:Value) :Exp
	Exp_newIdentifier (string:String) :Exp
	Exp_newUnary (type:ExpType, exp:Exp) :Exp
	Exp_newBinary (type:ExpType, a:Exp, b:Exp) :Exp
	Exp_newTernary (type:ExpType, a:Exp, b:Exp, c:Exp) :Exp

	<BinaryExp>
		a :Exp
		b :Exp

	<TerneryExp>
		a :Exp
		b :Exp
		c :Exp

value/
	<Value>
		meta :Value
		value :{number:Number, string:String, function:Function, pointer:Pointer}
	Value_new (meta:Value, value:Pointer) :Value
	Value_get (key:Value) :Value
	Value_set (key:Value, value:Value) :Value
	Value_is (self:Value, type:Value) :Value
	Value_equals (a:Value, b:Value) :Value

	<Number>
		hash :uint32
		count :int32
		value :real
	Number_new (number:real) :Number

	<String>
		length :uint32
		hash :uint32
		count :int32
	String_new (chars:Chars, length:uint32) :String
	String_getChars (self:String) :Chars





