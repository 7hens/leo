LOAD: 	RA = pool[BC]
JUMP:	?: RA {pc += sBC}	; (GOTO: RG_nil, sBC)
MOVE:	(A:) RB = RC 		; A in {MOVE, ABS, MINUS, NOT, U(...)}
ADD:	RA = RB + RC
SUB:	RA = RB - RC
MUL:	RA = RB * RC
DIV:	RA = RB / RC
MOD:	RA = RB \ RC
POW: 	RA = RB ** RC
IDIV: 	RA = RB // RC
EQ:		RA = RB == RC
NE:		RA = RB != RC
LT:		RA = RB << RC
LE:		RA = RB <= RC
GT:		RA = RB >> RC
GE:		RA = RB >= RC
AND:	RA = RB & RC
OR:		RA = RB | RC
XOR:	RA = RB ^ RC
NEW:	RA = {meta: RB, size: C}
GET:	RA = RB.RC
SET:	RA.RB = RC

//  code: C, B, A, op
//    32: 9, 9, 9, 5

// count: 22/+19
//     A: 9b, 0 ~ 255/511
//    BC: 18b, 0 ~ 262143
//   sBC: 18b, -131072 ~ 131071

// R_(temp, func, at, me)
// R_(nil, true, number, string, table, function, buildin, accessor)
// RN_(zero, one, two, half)
// RS_(length, memoryAddress, new, ...)

/*******************************************************************************
 *	R_temp: push temp stack (=) pop temp stack
 *	R_func: push call-frame (=) pop call-frame
 *	R_at:	set an argument (=) at value
 *	R_me:	return a value  (=) me value
 ******************************************************************************/

//==============================================================================
// ex.
//==============================================================================
d = a * b + b * c - c * a
	mul: R_temp = $a * $b
	mul: R_temp = $b * $c
	mul: R_temp = $c * $a
	sub: R_temp = R_temp - R_temp
	add: $d = R_temp + R_temp

foo $$ x
	$$ y
		x + y
	#<foo>: <para: $x>
		move: R_clos = $in_foo
		move: R_at = $x
		move: $me = R_clos
	#<in_foo>: <para: $y> <top: $x>
		add: $me = $x + $y

foo(a)(b)
	move: R_func = $foo
	move: R_at = $a
	move: R_func = R_func
	move: R_at = $b
	move: R_Nil = R_func
