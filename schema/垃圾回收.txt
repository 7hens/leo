对象的生命周期:
	创建: 由proc创建, 一般而言交由创建者回收
	转移:
		实参: 回收权不变
		闭包: 回收权交予closure
		返回: 回收权交予caller
		临时变量: 在pop之后, 立即进行回收
		局部变量: 在函数执行完毕后, 统一进行回收
	回收:
		Number, String: 通过计数进行GC
		Value: 通过mark-sweep进行GC
proc中要回收的对象:
	创建的局部变量
	创建的临时变量
	导入的闭包变量
	实参
	得到的返回值
proc中不回收的对象:
	常量寄存器中的对象
	pool中的对象
	导出的闭包变量
	形参
	返回值
proc中GC的过程:
	创建一张GC表
	创建的临时变量, 在被使用完后之间删除

		a = b + c + d
		## temp = b + c
		## a = temp + d
		在赋值结束后, 将temp放入GC区

		a = foo(c, d).abc
		## temp = foo(c, d)
		## a = temp.abc
		在语句结束后, 将temp放入GC区

		
	临时值(实参值, 得到的返回值)在被pop后直接删除
	GC表添加:
		创建的局部变量
		闭包导入的相关值
	GC表删除:
		闭包导出的相关值
		pool中的相关值
		返回的相关值

// ex.
a $$ x
	// $$ y
		x + y
a(1)(2)
##=================================
	load: $a, pool[...]
	move: R_func, $a
	move: R_at, 1
	move: R_func, R_func
		load: R_me, pool[...]
	move: R_arg, 2
	move: RG_Nil, R_func
		add: R_me, $x, $y
##=================================


